(set-option :print-success true )
; success

(set-option :timeout 40 )
; success

(declare-sort |HB_#String| 0 )
; success

(declare-sort |HB_SortCell| 0 )
; success

(declare-sort |HB_SortExp| 0 )
; success

(declare-sort |HB_SortGeneratedCounterCellOpt| 0 )
; success

(declare-sort |HB_SortK| 0 )
; success

(declare-sort |HB_SortKCellOpt| 0 )
; success

(declare-sort |HB_SortKConfigVar| 0 )
; success

(declare-sort |HB_SortKItem| 0 )
; success

(declare-sort |HB_SortList| 0 )
; success

(declare-sort |HB_SortMap| 0 )
; success

(declare-sort |HB_SortSet| 0 )
; success

(declare-sort |HB_SortGeneratedCounterCell| 0 )
; success

(declare-sort |HB_SortGeneratedTopCell| 0 )
; success

(declare-sort |HB_SortGeneratedTopCellFragment| 0 )
; success

(declare-sort |HB_SortKCell| 0 )
; success

(declare-fun |HB_Lbl'-LT-'generatedCounter'-GT-'| (Int ) |HB_SortGeneratedCounterCell| )
; success

(assert (forall ((x |HB_SortGeneratedCounterCell| ) ) (or (exists ((|HB_Lbl'-LT-'generatedCounter'-GT-'1| Int ) ) (= x (|HB_Lbl'-LT-'generatedCounter'-GT-'| |HB_Lbl'-LT-'generatedCounter'-GT-'1| ) ) ) ) ) )
; success

(declare-fun |HB_Lbl'-LT-'generatedTop'-GT-'| (|HB_SortKCell| |HB_SortGeneratedCounterCell| ) |HB_SortGeneratedTopCell| )
; success

(assert (forall ((x |HB_SortGeneratedTopCell| ) ) (or (exists ((|HB_Lbl'-LT-'generatedTop'-GT-'1| |HB_SortKCell| ) (|HB_Lbl'-LT-'generatedTop'-GT-'2| |HB_SortGeneratedCounterCell| ) ) (= x (|HB_Lbl'-LT-'generatedTop'-GT-'| |HB_Lbl'-LT-'generatedTop'-GT-'1| |HB_Lbl'-LT-'generatedTop'-GT-'2| ) ) ) ) ) )
; success

(declare-fun |HB_Lbl'-LT-'generatedTop'-GT-'-fragment| (|HB_SortKCellOpt| |HB_SortGeneratedCounterCellOpt| ) |HB_SortGeneratedTopCellFragment| )
; success

(assert (forall ((x |HB_SortGeneratedTopCellFragment| ) ) (or (exists ((|HB_Lbl'-LT-'generatedTop'-GT-'-fragment1| |HB_SortKCellOpt| ) (|HB_Lbl'-LT-'generatedTop'-GT-'-fragment2| |HB_SortGeneratedCounterCellOpt| ) ) (= x (|HB_Lbl'-LT-'generatedTop'-GT-'-fragment| |HB_Lbl'-LT-'generatedTop'-GT-'-fragment1| |HB_Lbl'-LT-'generatedTop'-GT-'-fragment2| ) ) ) ) ) )
; success

(declare-fun |HB_Lbl'-LT-'k'-GT-'| (|HB_SortK| ) |HB_SortKCell| )
; success

(assert (forall ((x |HB_SortKCell| ) ) (or (exists ((|HB_Lbl'-LT-'k'-GT-'1| |HB_SortK| ) ) (= x (|HB_Lbl'-LT-'k'-GT-'| |HB_Lbl'-LT-'k'-GT-'1| ) ) ) ) ) )
; success

(declare-fun smt_seq_nil () |HB_SortList| )
; success

(declare-fun notInt (Int ) Int )
; success

(declare-fun smt_seq_concat (|HB_SortList| |HB_SortList| ) |HB_SortList| )
; success

(declare-fun xorInt (Int Int ) Int )
; success

(declare-fun shrInt (Int Int ) Int )
; success

(declare-fun shlInt (Int Int ) Int )
; success

(declare-fun andInt (Int Int ) Int )
; success

(declare-fun orInt (Int Int ) Int )
; success

(declare-fun smt_seq_elem (|HB_SortKItem| ) |HB_SortList| )
; success

(declare-fun fi (Int Int ) Int )
; success

(declare-fun fp (|HB_SortExp| Int ) Int )
; success

(declare-fun smt_seq_len (|HB_SortList| ) Int )
; success

(push 1 )
; success

(declare-fun <0> () Bool )
; success

(assert (and (= false (= (fi 1 0 ) 0 ) ) <0> ) )
; success

(check-sat )
; sat

(pop 1 )
; success

(push 1 )
; success

(declare-fun <0> () Bool )
; success

(assert (and (= false (= (fi 1 0 ) 0 ) ) <0> ) )
; success

(check-sat )
; sat

(pop 1 )
; success

(push 1 )
; success

(declare-fun <0> () Bool )
; success

(assert (and (= true (= (fi 1 0 ) 0 ) ) <0> ) )
; success

(check-sat )
; sat

(pop 1 )
; success

(push 1 )
; success

(declare-fun <0> () Bool )
; success

(assert (and (= true (= (fi 1 0 ) 0 ) ) <0> ) )
; success

(check-sat )
; sat

(pop 1 )
; success

(push 1 )
; success

(declare-fun <0> () Bool )
; success

(assert (and (= false (= (fi 1 0 ) 0 ) ) <0> ) )
; success

(check-sat )
; sat

(pop 1 )
; success

(push 1 )
; success

(declare-fun <0> () Bool )
; success

(assert (and (= true (= (fi 1 0 ) 0 ) ) <0> ) )
; success

(check-sat )
; sat

(pop 1 )
; success

(exit )
(set-option :print-success true )
; success

(set-option :timeout 40 )
; success

(declare-sort |HB_#String| 0 )
; success

(declare-sort |HB_SortCell| 0 )
; success

(declare-sort |HB_SortExp| 0 )
; success

(declare-sort |HB_SortGeneratedCounterCellOpt| 0 )
; success

(declare-sort |HB_SortK| 0 )
; success

(declare-sort |HB_SortKCellOpt| 0 )
; success

(declare-sort |HB_SortKConfigVar| 0 )
; success

(declare-sort |HB_SortKItem| 0 )
; success

(declare-sort |HB_SortList| 0 )
; success

(declare-sort |HB_SortMap| 0 )
; success

(declare-sort |HB_SortSet| 0 )
; success

(declare-sort |HB_SortGeneratedCounterCell| 0 )
; success

(declare-sort |HB_SortGeneratedTopCell| 0 )
; success

(declare-sort |HB_SortGeneratedTopCellFragment| 0 )
; success

(declare-sort |HB_SortKCell| 0 )
; success

(declare-fun |HB_Lbl'-LT-'generatedCounter'-GT-'| (Int ) |HB_SortGeneratedCounterCell| )
; success

(assert (forall ((x |HB_SortGeneratedCounterCell| ) ) (or (exists ((|HB_Lbl'-LT-'generatedCounter'-GT-'1| Int ) ) (= x (|HB_Lbl'-LT-'generatedCounter'-GT-'| |HB_Lbl'-LT-'generatedCounter'-GT-'1| ) ) ) ) ) )
; success

(declare-fun |HB_Lbl'-LT-'generatedTop'-GT-'| (|HB_SortKCell| |HB_SortGeneratedCounterCell| ) |HB_SortGeneratedTopCell| )
; success

(assert (forall ((x |HB_SortGeneratedTopCell| ) ) (or (exists ((|HB_Lbl'-LT-'generatedTop'-GT-'1| |HB_SortKCell| ) (|HB_Lbl'-LT-'generatedTop'-GT-'2| |HB_SortGeneratedCounterCell| ) ) (= x (|HB_Lbl'-LT-'generatedTop'-GT-'| |HB_Lbl'-LT-'generatedTop'-GT-'1| |HB_Lbl'-LT-'generatedTop'-GT-'2| ) ) ) ) ) )
; success

(declare-fun |HB_Lbl'-LT-'generatedTop'-GT-'-fragment| (|HB_SortKCellOpt| |HB_SortGeneratedCounterCellOpt| ) |HB_SortGeneratedTopCellFragment| )
; success

(assert (forall ((x |HB_SortGeneratedTopCellFragment| ) ) (or (exists ((|HB_Lbl'-LT-'generatedTop'-GT-'-fragment1| |HB_SortKCellOpt| ) (|HB_Lbl'-LT-'generatedTop'-GT-'-fragment2| |HB_SortGeneratedCounterCellOpt| ) ) (= x (|HB_Lbl'-LT-'generatedTop'-GT-'-fragment| |HB_Lbl'-LT-'generatedTop'-GT-'-fragment1| |HB_Lbl'-LT-'generatedTop'-GT-'-fragment2| ) ) ) ) ) )
; success

(declare-fun |HB_Lbl'-LT-'k'-GT-'| (|HB_SortK| ) |HB_SortKCell| )
; success

(assert (forall ((x |HB_SortKCell| ) ) (or (exists ((|HB_Lbl'-LT-'k'-GT-'1| |HB_SortK| ) ) (= x (|HB_Lbl'-LT-'k'-GT-'| |HB_Lbl'-LT-'k'-GT-'1| ) ) ) ) ) )
; success

(declare-fun smt_seq_nil () |HB_SortList| )
; success

(declare-fun notInt (Int ) Int )
; success

(declare-fun smt_seq_concat (|HB_SortList| |HB_SortList| ) |HB_SortList| )
; success

(declare-fun xorInt (Int Int ) Int )
; success

(declare-fun shrInt (Int Int ) Int )
; success

(declare-fun shlInt (Int Int ) Int )
; success

(declare-fun andInt (Int Int ) Int )
; success

(declare-fun orInt (Int Int ) Int )
; success

(declare-fun smt_seq_elem (|HB_SortKItem| ) |HB_SortList| )
; success

(declare-fun fi (Int Int ) Int )
; success

(declare-fun fp (|HB_SortExp| Int ) Int )
; success

(declare-fun smt_seq_len (|HB_SortList| ) Int )
; success

(push 1 )
; success

(declare-fun <0> () Bool )
; success

(assert (and (= false (= (fi 1 0 ) 0 ) ) <0> ) )
; success

(check-sat )
; sat

(pop 1 )
; success

(push 1 )
; success

(declare-fun <0> () Bool )
; success

(assert (and (= false (= (fi 1 0 ) 0 ) ) <0> ) )
; success

(check-sat )
; sat

(pop 1 )
; success

(push 1 )
; success

(declare-fun <0> () Bool )
; success

(assert (and (= true (= (fi 1 0 ) 0 ) ) <0> ) )
; success

(check-sat )
; sat

(pop 1 )
; success

(push 1 )
; success

(declare-fun <0> () Bool )
; success

(assert (and (= true (= (fi 1 0 ) 0 ) ) <0> ) )
; success

(check-sat )
; sat

(pop 1 )
; success

(push 1 )
; success

(declare-fun <0> () Bool )
; success

(assert (and (= false (= (fi 1 0 ) 0 ) ) <0> ) )
; success

(check-sat )
; sat

(pop 1 )
; success

(push 1 )
; success

(declare-fun <0> () Bool )
; success

(assert (and (= true (= (fi 1 0 ) 0 ) ) <0> ) )
; success

(check-sat )
; sat

(pop 1 )
; success

(exit )
(set-option :print-success true )
; success

(set-option :timeout 40 )
; success

(declare-sort |HB_#String| 0 )
; success

(declare-sort |HB_SortCell| 0 )
; success

(declare-sort |HB_SortExp| 0 )
; success

(declare-sort |HB_SortGeneratedCounterCellOpt| 0 )
; success

(declare-sort |HB_SortK| 0 )
; success

(declare-sort |HB_SortKCellOpt| 0 )
; success

(declare-sort |HB_SortKConfigVar| 0 )
; success

(declare-sort |HB_SortKItem| 0 )
; success

(declare-sort |HB_SortList| 0 )
; success

(declare-sort |HB_SortMap| 0 )
; success

(declare-sort |HB_SortSet| 0 )
; success

(declare-sort |HB_SortGeneratedCounterCell| 0 )
; success

(declare-sort |HB_SortGeneratedTopCell| 0 )
; success

(declare-sort |HB_SortGeneratedTopCellFragment| 0 )
; success

(declare-sort |HB_SortKCell| 0 )
; success

(declare-fun |HB_Lbl'-LT-'generatedCounter'-GT-'| (Int ) |HB_SortGeneratedCounterCell| )
; success

(assert (forall ((x |HB_SortGeneratedCounterCell| ) ) (or (exists ((|HB_Lbl'-LT-'generatedCounter'-GT-'1| Int ) ) (= x (|HB_Lbl'-LT-'generatedCounter'-GT-'| |HB_Lbl'-LT-'generatedCounter'-GT-'1| ) ) ) ) ) )
; success

(declare-fun |HB_Lbl'-LT-'generatedTop'-GT-'| (|HB_SortKCell| |HB_SortGeneratedCounterCell| ) |HB_SortGeneratedTopCell| )
; success

(assert (forall ((x |HB_SortGeneratedTopCell| ) ) (or (exists ((|HB_Lbl'-LT-'generatedTop'-GT-'1| |HB_SortKCell| ) (|HB_Lbl'-LT-'generatedTop'-GT-'2| |HB_SortGeneratedCounterCell| ) ) (= x (|HB_Lbl'-LT-'generatedTop'-GT-'| |HB_Lbl'-LT-'generatedTop'-GT-'1| |HB_Lbl'-LT-'generatedTop'-GT-'2| ) ) ) ) ) )
; success

(declare-fun |HB_Lbl'-LT-'generatedTop'-GT-'-fragment| (|HB_SortKCellOpt| |HB_SortGeneratedCounterCellOpt| ) |HB_SortGeneratedTopCellFragment| )
; success

(assert (forall ((x |HB_SortGeneratedTopCellFragment| ) ) (or (exists ((|HB_Lbl'-LT-'generatedTop'-GT-'-fragment1| |HB_SortKCellOpt| ) (|HB_Lbl'-LT-'generatedTop'-GT-'-fragment2| |HB_SortGeneratedCounterCellOpt| ) ) (= x (|HB_Lbl'-LT-'generatedTop'-GT-'-fragment| |HB_Lbl'-LT-'generatedTop'-GT-'-fragment1| |HB_Lbl'-LT-'generatedTop'-GT-'-fragment2| ) ) ) ) ) )
; success

(declare-fun |HB_Lbl'-LT-'k'-GT-'| (|HB_SortK| ) |HB_SortKCell| )
; success

(assert (forall ((x |HB_SortKCell| ) ) (or (exists ((|HB_Lbl'-LT-'k'-GT-'1| |HB_SortK| ) ) (= x (|HB_Lbl'-LT-'k'-GT-'| |HB_Lbl'-LT-'k'-GT-'1| ) ) ) ) ) )
; success

(declare-fun smt_seq_nil () |HB_SortList| )
; success

(declare-fun notInt (Int ) Int )
; success

(declare-fun smt_seq_concat (|HB_SortList| |HB_SortList| ) |HB_SortList| )
; success

(declare-fun xorInt (Int Int ) Int )
; success

(declare-fun shrInt (Int Int ) Int )
; success

(declare-fun shlInt (Int Int ) Int )
; success

(declare-fun andInt (Int Int ) Int )
; success

(declare-fun orInt (Int Int ) Int )
; success

(declare-fun smt_seq_elem (|HB_SortKItem| ) |HB_SortList| )
; success

(declare-fun fi (Int Int ) Int )
; success

(declare-fun fp (|HB_SortExp| Int ) Int )
; success

(declare-fun smt_seq_len (|HB_SortList| ) Int )
; success

(push 1 )
; success

(assert (and (= false (= (fi 1 0 ) 0 ) ) (forall ((<0> Int ) ) (= (fi <0> 0 ) 0 ) ) ) )
; success

(check-sat )
; unsat

(pop 1 )
; success

(push 1 )
; success

(assert (and (= true (= (fi 1 0 ) 0 ) ) (forall ((<0> Int ) ) (= (fi <0> 0 ) 0 ) ) ) )
; success

(check-sat )
; sat

(pop 1 )
; success

(push 1 )
; success

(assert (and (= true (= (fi 1 0 ) 0 ) ) (forall ((<0> Int ) ) (= (fi <0> 0 ) 0 ) ) ) )
; success

(check-sat )
; sat

(pop 1 )
; success

(push 1 )
; success

(assert (and (= true (= (fi 1 0 ) 0 ) ) (forall ((<0> Int ) ) (= (fi <0> 0 ) 0 ) ) ) )
; success

(check-sat )
; sat

(pop 1 )
; success

(exit )
(set-option :print-success true )
; success

(set-option :timeout 40 )
; success

(declare-sort |HB_#String| 0 )
; success

(declare-sort |HB_SortCell| 0 )
; success

(declare-sort |HB_SortExp| 0 )
; success

(declare-sort |HB_SortGeneratedCounterCellOpt| 0 )
; success

(declare-sort |HB_SortK| 0 )
; success

(declare-sort |HB_SortKCellOpt| 0 )
; success

(declare-sort |HB_SortKConfigVar| 0 )
; success

(declare-sort |HB_SortKItem| 0 )
; success

(declare-sort |HB_SortList| 0 )
; success

(declare-sort |HB_SortMap| 0 )
; success

(declare-sort |HB_SortSet| 0 )
; success

(declare-sort |HB_SortGeneratedCounterCell| 0 )
; success

(declare-sort |HB_SortGeneratedTopCell| 0 )
; success

(declare-sort |HB_SortGeneratedTopCellFragment| 0 )
; success

(declare-sort |HB_SortKCell| 0 )
; success

(declare-fun |HB_Lbl'-LT-'generatedCounter'-GT-'| (Int ) |HB_SortGeneratedCounterCell| )
; success

(assert (forall ((x |HB_SortGeneratedCounterCell| ) ) (or (exists ((|HB_Lbl'-LT-'generatedCounter'-GT-'1| Int ) ) (= x (|HB_Lbl'-LT-'generatedCounter'-GT-'| |HB_Lbl'-LT-'generatedCounter'-GT-'1| ) ) ) ) ) )
; success

(declare-fun |HB_Lbl'-LT-'generatedTop'-GT-'| (|HB_SortKCell| |HB_SortGeneratedCounterCell| ) |HB_SortGeneratedTopCell| )
; success

(assert (forall ((x |HB_SortGeneratedTopCell| ) ) (or (exists ((|HB_Lbl'-LT-'generatedTop'-GT-'1| |HB_SortKCell| ) (|HB_Lbl'-LT-'generatedTop'-GT-'2| |HB_SortGeneratedCounterCell| ) ) (= x (|HB_Lbl'-LT-'generatedTop'-GT-'| |HB_Lbl'-LT-'generatedTop'-GT-'1| |HB_Lbl'-LT-'generatedTop'-GT-'2| ) ) ) ) ) )
; success

(declare-fun |HB_Lbl'-LT-'generatedTop'-GT-'-fragment| (|HB_SortKCellOpt| |HB_SortGeneratedCounterCellOpt| ) |HB_SortGeneratedTopCellFragment| )
; success

(assert (forall ((x |HB_SortGeneratedTopCellFragment| ) ) (or (exists ((|HB_Lbl'-LT-'generatedTop'-GT-'-fragment1| |HB_SortKCellOpt| ) (|HB_Lbl'-LT-'generatedTop'-GT-'-fragment2| |HB_SortGeneratedCounterCellOpt| ) ) (= x (|HB_Lbl'-LT-'generatedTop'-GT-'-fragment| |HB_Lbl'-LT-'generatedTop'-GT-'-fragment1| |HB_Lbl'-LT-'generatedTop'-GT-'-fragment2| ) ) ) ) ) )
; success

(declare-fun |HB_Lbl'-LT-'k'-GT-'| (|HB_SortK| ) |HB_SortKCell| )
; success

(assert (forall ((x |HB_SortKCell| ) ) (or (exists ((|HB_Lbl'-LT-'k'-GT-'1| |HB_SortK| ) ) (= x (|HB_Lbl'-LT-'k'-GT-'| |HB_Lbl'-LT-'k'-GT-'1| ) ) ) ) ) )
; success

(declare-fun smt_seq_nil () |HB_SortList| )
; success

(declare-fun notInt (Int ) Int )
; success

(declare-fun smt_seq_concat (|HB_SortList| |HB_SortList| ) |HB_SortList| )
; success

(declare-fun xorInt (Int Int ) Int )
; success

(declare-fun shrInt (Int Int ) Int )
; success

(declare-fun shlInt (Int Int ) Int )
; success

(declare-fun andInt (Int Int ) Int )
; success

(declare-fun orInt (Int Int ) Int )
; success

(declare-fun smt_seq_elem (|HB_SortKItem| ) |HB_SortList| )
; success

(declare-fun fi (Int Int ) Int )
; success

(declare-fun fp (|HB_SortExp| Int ) Int )
; success

(declare-fun smt_seq_len (|HB_SortList| ) Int )
; success

(push 1 )
; success

(declare-fun <0> () Bool )
; success

(assert (and (= false (= (fi 1 0 ) 0 ) ) <0> ) )
; success

(check-sat )
; sat

(pop 1 )
; success

(push 1 )
; success

(declare-fun <0> () Bool )
; success

(assert (and (= false (= (fi 1 0 ) 0 ) ) <0> ) )
; success

(check-sat )
; sat

(pop 1 )
; success

(push 1 )
; success

(declare-fun <0> () Bool )
; success

(assert (and (= true (= (fi 1 0 ) 0 ) ) <0> ) )
; success

(check-sat )
; sat

(pop 1 )
; success

(push 1 )
; success

(declare-fun <0> () Bool )
; success

(assert (and (= true (= (fi 1 0 ) 0 ) ) <0> ) )
; success

(check-sat )
; sat

(pop 1 )
; success

(push 1 )
; success

(declare-fun <0> () Bool )
; success

(assert (and (= false (= (fi 1 0 ) 0 ) ) <0> ) )
; success

(check-sat )
; sat

(pop 1 )
; success

(push 1 )
; success

(declare-fun <0> () Bool )
; success

(assert (and (= true (= (fi 1 0 ) 0 ) ) <0> ) )
; success

(check-sat )
; sat

(pop 1 )
; success

(exit )
(set-option :print-success true )
; success

(set-option :timeout 40 )
; success

(declare-sort |HB_#String| 0 )
; success

(declare-sort |HB_SortCell| 0 )
; success

(declare-sort |HB_SortExp| 0 )
; success

(declare-sort |HB_SortGeneratedCounterCellOpt| 0 )
; success

(declare-sort |HB_SortK| 0 )
; success

(declare-sort |HB_SortKCellOpt| 0 )
; success

(declare-sort |HB_SortKConfigVar| 0 )
; success

(declare-sort |HB_SortKItem| 0 )
; success

(declare-sort |HB_SortList| 0 )
; success

(declare-sort |HB_SortMap| 0 )
; success

(declare-sort |HB_SortSet| 0 )
; success

(declare-sort |HB_SortGeneratedCounterCell| 0 )
; success

(declare-sort |HB_SortGeneratedTopCell| 0 )
; success

(declare-sort |HB_SortGeneratedTopCellFragment| 0 )
; success

(declare-sort |HB_SortKCell| 0 )
; success

(declare-fun |HB_Lbl'-LT-'generatedCounter'-GT-'| (Int ) |HB_SortGeneratedCounterCell| )
; success

(assert (forall ((x |HB_SortGeneratedCounterCell| ) ) (or (exists ((|HB_Lbl'-LT-'generatedCounter'-GT-'1| Int ) ) (= x (|HB_Lbl'-LT-'generatedCounter'-GT-'| |HB_Lbl'-LT-'generatedCounter'-GT-'1| ) ) ) ) ) )
; success

(declare-fun |HB_Lbl'-LT-'generatedTop'-GT-'| (|HB_SortKCell| |HB_SortGeneratedCounterCell| ) |HB_SortGeneratedTopCell| )
; success

(assert (forall ((x |HB_SortGeneratedTopCell| ) ) (or (exists ((|HB_Lbl'-LT-'generatedTop'-GT-'1| |HB_SortKCell| ) (|HB_Lbl'-LT-'generatedTop'-GT-'2| |HB_SortGeneratedCounterCell| ) ) (= x (|HB_Lbl'-LT-'generatedTop'-GT-'| |HB_Lbl'-LT-'generatedTop'-GT-'1| |HB_Lbl'-LT-'generatedTop'-GT-'2| ) ) ) ) ) )
; success

(declare-fun |HB_Lbl'-LT-'generatedTop'-GT-'-fragment| (|HB_SortKCellOpt| |HB_SortGeneratedCounterCellOpt| ) |HB_SortGeneratedTopCellFragment| )
; success

(assert (forall ((x |HB_SortGeneratedTopCellFragment| ) ) (or (exists ((|HB_Lbl'-LT-'generatedTop'-GT-'-fragment1| |HB_SortKCellOpt| ) (|HB_Lbl'-LT-'generatedTop'-GT-'-fragment2| |HB_SortGeneratedCounterCellOpt| ) ) (= x (|HB_Lbl'-LT-'generatedTop'-GT-'-fragment| |HB_Lbl'-LT-'generatedTop'-GT-'-fragment1| |HB_Lbl'-LT-'generatedTop'-GT-'-fragment2| ) ) ) ) ) )
; success

(declare-fun |HB_Lbl'-LT-'k'-GT-'| (|HB_SortK| ) |HB_SortKCell| )
; success

(assert (forall ((x |HB_SortKCell| ) ) (or (exists ((|HB_Lbl'-LT-'k'-GT-'1| |HB_SortK| ) ) (= x (|HB_Lbl'-LT-'k'-GT-'| |HB_Lbl'-LT-'k'-GT-'1| ) ) ) ) ) )
; success

(declare-fun smt_seq_nil () |HB_SortList| )
; success

(declare-fun notInt (Int ) Int )
; success

(declare-fun smt_seq_concat (|HB_SortList| |HB_SortList| ) |HB_SortList| )
; success

(declare-fun xorInt (Int Int ) Int )
; success

(declare-fun shrInt (Int Int ) Int )
; success

(declare-fun shlInt (Int Int ) Int )
; success

(declare-fun andInt (Int Int ) Int )
; success

(declare-fun orInt (Int Int ) Int )
; success

(declare-fun smt_seq_elem (|HB_SortKItem| ) |HB_SortList| )
; success

(declare-fun fi (Int Int ) Int )
; success

(declare-fun fp (|HB_SortExp| Int ) Int )
; success

(declare-fun smt_seq_len (|HB_SortList| ) Int )
; success

(push 1 )
; success

(declare-fun <0> () Bool )
; success

(assert (and (= false (= (fi 1 0 ) 0 ) ) <0> ) )
; success

(check-sat )
; sat

(pop 1 )
; success

(push 1 )
; success

(declare-fun <0> () Bool )
; success

(assert (and (= false (= (fi 1 0 ) 0 ) ) <0> ) )
; success

(check-sat )
; sat

(pop 1 )
; success

(push 1 )
; success

(declare-fun <0> () Bool )
; success

(assert (and (= true (= (fi 1 0 ) 0 ) ) <0> ) )
; success

(check-sat )
; sat

(pop 1 )
; success

(push 1 )
; success

(declare-fun <0> () Bool )
; success

(assert (and (= true (= (fi 1 0 ) 0 ) ) <0> ) )
; success

(check-sat )
; sat

(pop 1 )
; success

(push 1 )
; success

(declare-fun <0> () Bool )
; success

(assert (and (= false (= (fi 1 0 ) 0 ) ) <0> ) )
; success

(check-sat )
; sat

(pop 1 )
; success

(push 1 )
; success

(declare-fun <0> () Bool )
; success

(assert (and (= true (= (fi 1 0 ) 0 ) ) <0> ) )
; success

(check-sat )
; sat

(pop 1 )
; success

(exit )
(set-option :print-success true )
; success

(set-option :timeout 40 )
; success

(declare-sort |HB_#String| 0 )
; success

(declare-sort |HB_SortCell| 0 )
; success

(declare-sort |HB_SortExp| 0 )
; success

(declare-sort |HB_SortGeneratedCounterCellOpt| 0 )
; success

(declare-sort |HB_SortK| 0 )
; success

(declare-sort |HB_SortKCellOpt| 0 )
; success

(declare-sort |HB_SortKConfigVar| 0 )
; success

(declare-sort |HB_SortKItem| 0 )
; success

(declare-sort |HB_SortList| 0 )
; success

(declare-sort |HB_SortMap| 0 )
; success

(declare-sort |HB_SortSet| 0 )
; success

(declare-sort |HB_SortGeneratedCounterCell| 0 )
; success

(declare-sort |HB_SortGeneratedTopCell| 0 )
; success

(declare-sort |HB_SortGeneratedTopCellFragment| 0 )
; success

(declare-sort |HB_SortKCell| 0 )
; success

(declare-fun |HB_Lbl'-LT-'generatedCounter'-GT-'| (Int ) |HB_SortGeneratedCounterCell| )
; success

(assert (forall ((x |HB_SortGeneratedCounterCell| ) ) (or (exists ((|HB_Lbl'-LT-'generatedCounter'-GT-'1| Int ) ) (= x (|HB_Lbl'-LT-'generatedCounter'-GT-'| |HB_Lbl'-LT-'generatedCounter'-GT-'1| ) ) ) ) ) )
; success

(declare-fun |HB_Lbl'-LT-'generatedTop'-GT-'| (|HB_SortKCell| |HB_SortGeneratedCounterCell| ) |HB_SortGeneratedTopCell| )
; success

(assert (forall ((x |HB_SortGeneratedTopCell| ) ) (or (exists ((|HB_Lbl'-LT-'generatedTop'-GT-'1| |HB_SortKCell| ) (|HB_Lbl'-LT-'generatedTop'-GT-'2| |HB_SortGeneratedCounterCell| ) ) (= x (|HB_Lbl'-LT-'generatedTop'-GT-'| |HB_Lbl'-LT-'generatedTop'-GT-'1| |HB_Lbl'-LT-'generatedTop'-GT-'2| ) ) ) ) ) )
; success

(declare-fun |HB_Lbl'-LT-'generatedTop'-GT-'-fragment| (|HB_SortKCellOpt| |HB_SortGeneratedCounterCellOpt| ) |HB_SortGeneratedTopCellFragment| )
; success

(assert (forall ((x |HB_SortGeneratedTopCellFragment| ) ) (or (exists ((|HB_Lbl'-LT-'generatedTop'-GT-'-fragment1| |HB_SortKCellOpt| ) (|HB_Lbl'-LT-'generatedTop'-GT-'-fragment2| |HB_SortGeneratedCounterCellOpt| ) ) (= x (|HB_Lbl'-LT-'generatedTop'-GT-'-fragment| |HB_Lbl'-LT-'generatedTop'-GT-'-fragment1| |HB_Lbl'-LT-'generatedTop'-GT-'-fragment2| ) ) ) ) ) )
; success

(declare-fun |HB_Lbl'-LT-'k'-GT-'| (|HB_SortK| ) |HB_SortKCell| )
; success

(assert (forall ((x |HB_SortKCell| ) ) (or (exists ((|HB_Lbl'-LT-'k'-GT-'1| |HB_SortK| ) ) (= x (|HB_Lbl'-LT-'k'-GT-'| |HB_Lbl'-LT-'k'-GT-'1| ) ) ) ) ) )
; success

(declare-fun smt_seq_nil () |HB_SortList| )
; success

(declare-fun notInt (Int ) Int )
; success

(declare-fun smt_seq_concat (|HB_SortList| |HB_SortList| ) |HB_SortList| )
; success

(declare-fun xorInt (Int Int ) Int )
; success

(declare-fun shrInt (Int Int ) Int )
; success

(declare-fun shlInt (Int Int ) Int )
; success

(declare-fun andInt (Int Int ) Int )
; success

(declare-fun orInt (Int Int ) Int )
; success

(declare-fun smt_seq_elem (|HB_SortKItem| ) |HB_SortList| )
; success

(declare-fun fi (Int Int ) Int )
; success

(declare-fun fp (|HB_SortExp| Int ) Int )
; success

(declare-fun smt_seq_len (|HB_SortList| ) Int )
; success

(push 1 )
; success

(assert (and (= false (= (fi 1 0 ) 0 ) ) (forall ((<0> Int ) ) (= (fi <0> 0 ) 0 ) ) ) )
; success

(check-sat )
; unsat

(pop 1 )
; success

(push 1 )
; success

(assert (and (= true (= (fi 1 0 ) 0 ) ) (forall ((<0> Int ) ) (= (fi <0> 0 ) 0 ) ) ) )
; success

(check-sat )
; sat

(pop 1 )
; success

(push 1 )
; success

(assert (and (= true (= (fi 1 0 ) 0 ) ) (forall ((<0> Int ) ) (= (fi <0> 0 ) 0 ) ) ) )
; success

(check-sat )
; sat

(pop 1 )
; success

(push 1 )
; success

(assert (and (= true (= (fi 1 0 ) 0 ) ) (forall ((<0> Int ) ) (= (fi <0> 0 ) 0 ) ) ) )
; success

(check-sat )
; sat

(pop 1 )
; success

(exit )
(set-option :print-success true )
; success

(set-option :timeout 40 )
; success

(declare-sort |HB_#String| 0 )
; success

(declare-sort |HB_SortCell| 0 )
; success

(declare-sort |HB_SortExp| 0 )
; success

(declare-sort |HB_SortGeneratedCounterCellOpt| 0 )
; success

(declare-sort |HB_SortK| 0 )
; success

(declare-sort |HB_SortKCellOpt| 0 )
; success

(declare-sort |HB_SortKConfigVar| 0 )
; success

(declare-sort |HB_SortKItem| 0 )
; success

(declare-sort |HB_SortList| 0 )
; success

(declare-sort |HB_SortMap| 0 )
; success

(declare-sort |HB_SortSet| 0 )
; success

(declare-sort |HB_SortGeneratedCounterCell| 0 )
; success

(declare-sort |HB_SortGeneratedTopCell| 0 )
; success

(declare-sort |HB_SortGeneratedTopCellFragment| 0 )
; success

(declare-sort |HB_SortKCell| 0 )
; success

(declare-fun |HB_Lbl'-LT-'generatedCounter'-GT-'| (Int ) |HB_SortGeneratedCounterCell| )
; success

(assert (forall ((x |HB_SortGeneratedCounterCell| ) ) (or (exists ((|HB_Lbl'-LT-'generatedCounter'-GT-'1| Int ) ) (= x (|HB_Lbl'-LT-'generatedCounter'-GT-'| |HB_Lbl'-LT-'generatedCounter'-GT-'1| ) ) ) ) ) )
; success

(declare-fun |HB_Lbl'-LT-'generatedTop'-GT-'| (|HB_SortKCell| |HB_SortGeneratedCounterCell| ) |HB_SortGeneratedTopCell| )
; success

(assert (forall ((x |HB_SortGeneratedTopCell| ) ) (or (exists ((|HB_Lbl'-LT-'generatedTop'-GT-'1| |HB_SortKCell| ) (|HB_Lbl'-LT-'generatedTop'-GT-'2| |HB_SortGeneratedCounterCell| ) ) (= x (|HB_Lbl'-LT-'generatedTop'-GT-'| |HB_Lbl'-LT-'generatedTop'-GT-'1| |HB_Lbl'-LT-'generatedTop'-GT-'2| ) ) ) ) ) )
; success

(declare-fun |HB_Lbl'-LT-'generatedTop'-GT-'-fragment| (|HB_SortKCellOpt| |HB_SortGeneratedCounterCellOpt| ) |HB_SortGeneratedTopCellFragment| )
; success

(assert (forall ((x |HB_SortGeneratedTopCellFragment| ) ) (or (exists ((|HB_Lbl'-LT-'generatedTop'-GT-'-fragment1| |HB_SortKCellOpt| ) (|HB_Lbl'-LT-'generatedTop'-GT-'-fragment2| |HB_SortGeneratedCounterCellOpt| ) ) (= x (|HB_Lbl'-LT-'generatedTop'-GT-'-fragment| |HB_Lbl'-LT-'generatedTop'-GT-'-fragment1| |HB_Lbl'-LT-'generatedTop'-GT-'-fragment2| ) ) ) ) ) )
; success

(declare-fun |HB_Lbl'-LT-'k'-GT-'| (|HB_SortK| ) |HB_SortKCell| )
; success

(assert (forall ((x |HB_SortKCell| ) ) (or (exists ((|HB_Lbl'-LT-'k'-GT-'1| |HB_SortK| ) ) (= x (|HB_Lbl'-LT-'k'-GT-'| |HB_Lbl'-LT-'k'-GT-'1| ) ) ) ) ) )
; success

(declare-fun smt_seq_nil () |HB_SortList| )
; success

(declare-fun notInt (Int ) Int )
; success

(declare-fun smt_seq_concat (|HB_SortList| |HB_SortList| ) |HB_SortList| )
; success

(declare-fun xorInt (Int Int ) Int )
; success

(declare-fun shrInt (Int Int ) Int )
; success

(declare-fun shlInt (Int Int ) Int )
; success

(declare-fun andInt (Int Int ) Int )
; success

(declare-fun orInt (Int Int ) Int )
; success

(declare-fun smt_seq_elem (|HB_SortKItem| ) |HB_SortList| )
; success

(declare-fun fi (Int Int ) Int )
; success

(declare-fun fp (|HB_SortExp| Int ) Int )
; success

(declare-fun smt_seq_len (|HB_SortList| ) Int )
; success

(push 1 )
; success

(assert (and (= false (= (fi 1 0 ) 0 ) ) (forall ((<0> Int ) ) (= (fi <0> 0 ) 0 ) ) ) )
; success

(check-sat )
; unsat

(pop 1 )
; success

(push 1 )
; success

(assert (and (= true (= (fi 1 0 ) 0 ) ) (forall ((<0> Int ) ) (= (fi <0> 0 ) 0 ) ) ) )
; success

(check-sat )
; sat

(pop 1 )
; success

(push 1 )
; success

(assert (and (= true (= (fi 1 0 ) 0 ) ) (forall ((<0> Int ) ) (= (fi <0> 0 ) 0 ) ) ) )
; success

(check-sat )
; sat

(pop 1 )
; success

(push 1 )
; success

(assert (and (= true (= (fi 1 0 ) 0 ) ) (forall ((<0> Int ) ) (= (fi <0> 0 ) 0 ) ) ) )
; success

(check-sat )
; sat

(pop 1 )
; success

(exit )
(set-option :print-success true )
; success

(set-option :timeout 40 )
; success

(declare-sort |HB_#String| 0 )
; success

(declare-sort |HB_SortCell| 0 )
; success

(declare-sort |HB_SortExp| 0 )
; success

(declare-sort |HB_SortGeneratedCounterCellOpt| 0 )
; success

(declare-sort |HB_SortK| 0 )
; success

(declare-sort |HB_SortKCellOpt| 0 )
; success

(declare-sort |HB_SortKConfigVar| 0 )
; success

(declare-sort |HB_SortKItem| 0 )
; success

(declare-sort |HB_SortList| 0 )
; success

(declare-sort |HB_SortMap| 0 )
; success

(declare-sort |HB_SortSet| 0 )
; success

(declare-sort |HB_SortGeneratedCounterCell| 0 )
; success

(declare-sort |HB_SortGeneratedTopCell| 0 )
; success

(declare-sort |HB_SortGeneratedTopCellFragment| 0 )
; success

(declare-sort |HB_SortKCell| 0 )
; success

(declare-fun |HB_Lbl'-LT-'generatedCounter'-GT-'| (Int ) |HB_SortGeneratedCounterCell| )
; success

(assert (forall ((x |HB_SortGeneratedCounterCell| ) ) (or (exists ((|HB_Lbl'-LT-'generatedCounter'-GT-'1| Int ) ) (= x (|HB_Lbl'-LT-'generatedCounter'-GT-'| |HB_Lbl'-LT-'generatedCounter'-GT-'1| ) ) ) ) ) )
; success

(declare-fun |HB_Lbl'-LT-'generatedTop'-GT-'| (|HB_SortKCell| |HB_SortGeneratedCounterCell| ) |HB_SortGeneratedTopCell| )
; success

(assert (forall ((x |HB_SortGeneratedTopCell| ) ) (or (exists ((|HB_Lbl'-LT-'generatedTop'-GT-'1| |HB_SortKCell| ) (|HB_Lbl'-LT-'generatedTop'-GT-'2| |HB_SortGeneratedCounterCell| ) ) (= x (|HB_Lbl'-LT-'generatedTop'-GT-'| |HB_Lbl'-LT-'generatedTop'-GT-'1| |HB_Lbl'-LT-'generatedTop'-GT-'2| ) ) ) ) ) )
; success

(declare-fun |HB_Lbl'-LT-'generatedTop'-GT-'-fragment| (|HB_SortKCellOpt| |HB_SortGeneratedCounterCellOpt| ) |HB_SortGeneratedTopCellFragment| )
; success

(assert (forall ((x |HB_SortGeneratedTopCellFragment| ) ) (or (exists ((|HB_Lbl'-LT-'generatedTop'-GT-'-fragment1| |HB_SortKCellOpt| ) (|HB_Lbl'-LT-'generatedTop'-GT-'-fragment2| |HB_SortGeneratedCounterCellOpt| ) ) (= x (|HB_Lbl'-LT-'generatedTop'-GT-'-fragment| |HB_Lbl'-LT-'generatedTop'-GT-'-fragment1| |HB_Lbl'-LT-'generatedTop'-GT-'-fragment2| ) ) ) ) ) )
; success

(declare-fun |HB_Lbl'-LT-'k'-GT-'| (|HB_SortK| ) |HB_SortKCell| )
; success

(assert (forall ((x |HB_SortKCell| ) ) (or (exists ((|HB_Lbl'-LT-'k'-GT-'1| |HB_SortK| ) ) (= x (|HB_Lbl'-LT-'k'-GT-'| |HB_Lbl'-LT-'k'-GT-'1| ) ) ) ) ) )
; success

(declare-fun smt_seq_nil () |HB_SortList| )
; success

(declare-fun notInt (Int ) Int )
; success

(declare-fun smt_seq_concat (|HB_SortList| |HB_SortList| ) |HB_SortList| )
; success

(declare-fun xorInt (Int Int ) Int )
; success

(declare-fun shrInt (Int Int ) Int )
; success

(declare-fun shlInt (Int Int ) Int )
; success

(declare-fun andInt (Int Int ) Int )
; success

(declare-fun orInt (Int Int ) Int )
; success

(declare-fun smt_seq_elem (|HB_SortKItem| ) |HB_SortList| )
; success

(declare-fun fi (Int Int ) Int )
; success

(declare-fun fp (|HB_SortExp| Int ) Int )
; success

(declare-fun smt_seq_len (|HB_SortList| ) Int )
; success

(push 1 )
; success

(assert (and (= false (= (fi 1 0 ) 0 ) ) (forall ((<0> Int ) ) (= (fi <0> 0 ) 0 ) ) ) )
; success

(check-sat )
; unsat

(pop 1 )
; success

(push 1 )
; success

(assert (and (= true (= (fi 1 0 ) 0 ) ) (forall ((<0> Int ) ) (= (fi <0> 0 ) 0 ) ) ) )
; success

(check-sat )
; sat

(pop 1 )
; success

(push 1 )
; success

(assert (and (= true (= (fi 1 0 ) 0 ) ) (forall ((<0> Int ) ) (= (fi <0> 0 ) 0 ) ) ) )
; success

(check-sat )
; sat

(pop 1 )
; success

(push 1 )
; success

(assert (and (= true (= (fi 1 0 ) 0 ) ) (forall ((<0> Int ) ) (= (fi <0> 0 ) 0 ) ) ) )
; success

(check-sat )
; sat

(pop 1 )
; success

(exit )
